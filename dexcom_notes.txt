############################################################
## 09/22/17
############################################################

I have been able to make a prelim connection to the dexcom device

$> sudo python3 scan_and_connect.py

  ... waited < 5 minutes ...

Discovered [f6:fa:94:6a:70:21] Dexcom8G
Connecting to Dexcom8G
properties_changed - dbus.Dictionary({dbus.String('RSSI'): dbus.Int16(-80, variant_level=1)}, signature=dbus.Signature('sv')), dbus.Array([], signature=dbus.Signature('s'))
[f6:fa:94:6a:70:21] Connected
properties_changed - dbus.Dictionary({dbus.String('Connected'): dbus.Boolean(True, variant_level=1)}, signature=dbus.Signature('sv')), dbus.Array([], signature=dbus.Signature('s'))
[f6:fa:94:6a:70:21] Resolved services
[f6:fa:94:6a:70:21]  Service [f8083532-849e-531c-c594-30f1f86a4ea5]
[f6:fa:94:6a:70:21]    Characteristic [f8083534-849e-531c-c594-30f1f86a4ea5]
[f6:fa:94:6a:70:21]    Characteristic [f8083535-849e-531c-c594-30f1f86a4ea5]
[f6:fa:94:6a:70:21]    Characteristic [f8083533-849e-531c-c594-30f1f86a4ea5]
[f6:fa:94:6a:70:21]    Characteristic [f8083537-849e-531c-c594-30f1f86a4ea5]
[f6:fa:94:6a:70:21]    Characteristic [f8083536-849e-531c-c594-30f1f86a4ea5]
[f6:fa:94:6a:70:21]  Service [0000180a-0000-1000-8000-00805f9b34fb]
[f6:fa:94:6a:70:21]    Characteristic [00002a24-0000-1000-8000-00805f9b34fb]
[f6:fa:94:6a:70:21]    Characteristic [00002a29-0000-1000-8000-00805f9b34fb]
[f6:fa:94:6a:70:21]    Characteristic [00002a26-0000-1000-8000-00805f9b34fb]
[f6:fa:94:6a:70:21]  Service [00001801-0000-1000-8000-00805f9b34fb]
[f6:fa:94:6a:70:21]    Characteristic [00002a05-0000-1000-8000-00805f9b34fb]
properties_changed - dbus.Dictionary({dbus.String('ServicesResolved'): dbus.Boolean(True, variant_level=1)}, signature=dbus.Signature('sv')), dbus.Array([], signature=dbus.Signature('s'))
[f6:fa:94:6a:70:21] Disconnected
properties_changed - dbus.Dictionary({dbus.String('ServicesResolved'): dbus.Boolean(False, variant_level=1), dbus.String('Connected'): dbus.Boolean(False, variant_level=1)}, signature=dbus.Signature('sv')), dbus.Array([], signature=dbus.Signature('s'))


These services and characteristics match the expected ones seen in the xDrip code at 
https://github.com/StephenBlackWasAlreadyTaken/xDrip-Experimental/blob/5657d5bb7f3912013724e75cd309dfcfeda8db2c/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java#L11


See comments in https://github.com/StephenBlackWasAlreadyTaken/xDrip-Experimental/blob/5657d5bb7f3912013724e75cd309dfcfeda8db2c/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java#L510
// Check if the device has a name, the Dexcom transmitter always should. Match it with the transmitter id that was entered.
// We get the last 2 characters to connect to the correct transmitter if there is more than 1 active or in the room.
// If they match, connect to the device.

############################################################
## 09/21/17
############################################################

Following the instructions on this page I was able to discover the transmitter

https://github.com/getsenic/gatt-python
 - Updating/installing BlueZ via apt-get
 - Installing BlueZ from sources
 - Enabling your Bluetooth adapter
 - Using BlueZ commandline tools
   $> sudo bluetoothctl
   [NEW] Controller B8:27:EB:D2:C3:F4 autodex [default]
   [bluetooth]# power on
 - Installing GATT SDK for Python
 - Discovering nearby Bluetooth Low Energy devices

test.py contains
```
import gatt

class AnyDeviceManager(gatt.DeviceManager):
    def device_discovered(self, device):
        print("Discovered [%s] %s" % (device.mac_address, device.alias()))

manager = AnyDeviceManager(adapter_name='hci0')
manager.start_discovery()
manager.run()
```

$> sudo python3 test.py
Discovered [f6:fa:94:6a:70:21] Dexcom8G

This ran for a very long time but I realized that I may have been too far, physically,
from my raspberry pi. The pi was located ~50ft away, through 4 walls.

As soon as I was walked into my office (same room as pi) the device was found.


############################################################
## 09/20/17
############################################################

# install bluepy
sudo apt-get install python-pip libglib2.0-dev
sudo pip install bluepy

# running script to scan devices seems to fail

# tried this after script didn't run
sudo pip install --no-binary :all: bluepy

################

# install bluetooth stuff
sudo apt-get install bluetooth bluez blueman

# scan
$> sudo bluetoothctl
[NEW] Controller B8:27:EB:D2:C3:F4 autodex [default]
[bluetooth]# scan on
Discovery started

# after a while it finally gave this

[NEW] Device F6:FA:94:6A:70:21 Dexcom8G

# this is the same device name I see on my phone
# in short, device found and we can now try pairing and connecting

################

dennis@autodex:~/dev/scan $ sudo hciconfig
hci0: Type: Primary  Bus: UART
  BD Address: B8:27:EB:D2:C3:F4  ACL MTU: 1021:8  SCO MTU: 64:1
  UP RUNNING
  RX bytes:6230 acl:0 sco:0 events:509 errors:0
  TX bytes:5842 acl:0 sco:0 commands:363 errors:0

################

# install pybluez

sudo apt-get update
sudo apt-get install python-pip python-dev ipython

sudo apt-get install bluetooth libbluetooth-dev
sudo pip install pybluez

################


################
sudo apt-get install libbluetooth-dev bluez bluez-hcidump  libboost-python-dev libboost-thread-dev libglib2.0-dev
sudo pip install pybluez gattlib

# Links
http://www.elinux.org/RPi_Bluetooth_LE
https://lifehacker.com/everything-you-need-to-set-up-bluetooth-on-the-raspberr-1768482065
https://www.raspberrypi.org/forums/viewtopic.php?t=138145
http://shawnhymel.com/665/using-python-and-ble-to-receive-data-from-the-rfduino/
https://github.com/LoopKit/xDripG5/tree/master/xDripG5
https://github.com/scivision/pybluez-examples#scanning-for-bluetooth-devices-from-python

https://github.com/getsenic/gatt-python
https://flowcloud.github.io/ci20-bluetooth-LE/2015/09/10/bluetooth-control-in-python/
https://github.com/peplin/pygatt
